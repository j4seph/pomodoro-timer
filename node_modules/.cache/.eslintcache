[{"/Users/707/Documents/code/pomodoro-timer/src/index.js":"1","/Users/707/Documents/code/pomodoro-timer/src/App.js":"2","/Users/707/Documents/code/pomodoro-timer/src/reportWebVitals.js":"3","/Users/707/Documents/code/pomodoro-timer/src/components/Timer/Timer.js":"4","/Users/707/Documents/code/pomodoro-timer/src/components/TimerTopButtons/TimerTopButtons.js":"5","/Users/707/Documents/code/pomodoro-timer/src/components/InfoPanel/InfoPanel.js":"6","/Users/707/Documents/code/pomodoro-timer/src/components/SettingsPanel/SettingsPanel.js":"7"},{"size":254,"mtime":1677597377609,"results":"8","hashOfConfig":"9"},{"size":1260,"mtime":1677597695791,"results":"10","hashOfConfig":"9"},{"size":362,"mtime":1677597148541,"results":"11","hashOfConfig":"9"},{"size":4692,"mtime":1677598721727,"results":"12","hashOfConfig":"9"},{"size":2412,"mtime":1677598035826,"results":"13","hashOfConfig":"9"},{"size":1619,"mtime":1677598508787,"results":"14","hashOfConfig":"9"},{"size":2840,"mtime":1677598533897,"results":"15","hashOfConfig":"9"},{"filePath":"16","messages":"17","suppressedMessages":"18","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},"1c5lz9w",{"filePath":"19","messages":"20","suppressedMessages":"21","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"22","messages":"23","suppressedMessages":"24","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"25","messages":"26","suppressedMessages":"27","errorCount":0,"fatalErrorCount":0,"warningCount":2,"fixableErrorCount":0,"fixableWarningCount":0,"source":"28"},{"filePath":"29","messages":"30","suppressedMessages":"31","errorCount":0,"fatalErrorCount":0,"warningCount":2,"fixableErrorCount":0,"fixableWarningCount":0,"source":"32"},{"filePath":"33","messages":"34","suppressedMessages":"35","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"36","messages":"37","suppressedMessages":"38","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},"/Users/707/Documents/code/pomodoro-timer/src/index.js",[],[],"/Users/707/Documents/code/pomodoro-timer/src/App.js",[],[],"/Users/707/Documents/code/pomodoro-timer/src/reportWebVitals.js",[],[],"/Users/707/Documents/code/pomodoro-timer/src/components/Timer/Timer.js",["39","40"],[],"import { useState, useEffect, useRef } from \"react\";\nimport restart from \"../../assets/restart.svg\";\nimport pause from \"../../assets/pause.svg\";\nimport play from \"../../assets/play.svg\";\nimport buttonClickSound from \"../../assets/switch-button.mp3\";\nimport timerFinishedSound from \"../../assets/timer-finished.mp3\";\nimport \"./Timer.css\";\n\nexport default function Timer({\n  workTime,\n  showWorkTime,\n  breakTime,\n  showBreakTime,\n  soundPreference,\n}) {\n  const [minutes, setMinutes] = useState(workTime);\n  const [seconds, setSeconds] = useState(0);\n  const [hasBeenActive, setHasBeenActive] = useState(false);\n  const [active, setActive] = useState(false);\n  const buttonClick = useRef(null);\n  const timerFinished = useRef(null);\n  const timeLeft =\n    (minutes < 10 ? \"0\" + minutes : minutes) +\n    \":\" +\n    (seconds < 10 ? \"0\" + seconds : seconds);\n\n  active\n    ? (document.title = timeLeft + \" - Pomodoro timer\")\n    : (document.title = \"Pomodoro timer\");\n\n  useEffect(() => {\n    if (showWorkTime) {\n      setActive(false);\n      setMinutes(workTime);\n      setSeconds(0);\n    } else {\n      return;\n    }\n  }, [workTime, showWorkTime]);\n\n  useEffect(() => {\n    if (showBreakTime) {\n      setActive(false);\n      setMinutes(breakTime);\n      setSeconds(0);\n    } else {\n      return;\n    }\n  }, [breakTime, showBreakTime]);\n\n  useEffect(() => {\n    if (active && seconds > 0) {\n      setTimeout(() => {\n        setSeconds(seconds - 1);\n      }, 1000);\n    } else if (active && minutes > 0 && seconds === 0) {\n      setTimeout(() => {\n        setMinutes(minutes - 1);\n        setSeconds(59);\n      }, 1000);\n    } else if (active && minutes === 0 && seconds === 0) {\n      pauseTimer();\n      if (soundPreference) {\n        timerFinished.current.play();\n      }\n      setActive(false);\n    }\n  }, [active, minutes, seconds, pauseTimer, soundPreference]);\n\n  function beginTimer() {\n    if (soundPreference) {\n      buttonClick.current.play();\n    }\n\n    if (hasBeenActive === false) {\n      setHasBeenActive(true);\n      setMinutes(minutes - 1);\n      setSeconds(59);\n      setActive(true);\n      return;\n    } else {\n      setActive(true);\n      return;\n    }\n  }\n\n  function pauseTimer() {\n    if (soundPreference) {\n      buttonClick.current.play();\n    }\n    setActive(false);\n    return;\n  }\n\n  function restartTimer() {\n    if (soundPreference) {\n      buttonClick.current.play();\n    }\n    setActive(false);\n    setSeconds(0);\n\n    if (showWorkTime) {\n      setMinutes(workTime);\n    } else {\n      setMinutes(breakTime);\n    }\n  }\n\n  return (\n    <>\n      <div className=\"time-left\">\n        <h1>{timeLeft}</h1>\n      </div>\n      <div className=\"buttons\">\n        <audio ref={buttonClick}>\n          <source src={buttonClickSound} type=\"audio/mpeg\" />\n        </audio>\n        <audio ref={timerFinished}>\n          <source src={timerFinishedSound} type=\"audio/mpeg\" />\n        </audio>\n        {active ? (\n          <>\n            <button\n              onClick={beginTimer}\n              id=\"play-button\"\n              style={{ marginRight: \"15px\" }}\n              className=\"button-disabled\"\n            >\n              <img src={play} id=\"play-icon\" alt=\"play-icon\" />\n            </button>\n            <button\n              onClick={pauseTimer}\n              id=\"pause-button\"\n              style={{ marginRight: \"15px\" }}\n            >\n              <img\n                src={pause}\n                id=\"pause-button\"\n                className=\"icon-disabled\"\n                alt=\"pause-button\"\n              />\n            </button>\n            <button\n              onClick={restartTimer}\n              id=\"restart-button\"\n              className=\"button-disabled\"\n            >\n              <img src={restart} alt=\"restart-button\" />\n            </button>\n          </>\n        ) : (\n          <>\n            <button\n              onClick={beginTimer}\n              id=\"play-button\"\n              style={{ marginRight: \"15px\" }}\n            >\n              <img src={play} id=\"play-icon\" alt=\"play-button\" />\n            </button>\n            <button\n              onClick={pauseTimer}\n              id=\"pause-button\"\n              style={{ marginRight: \"15px\" }}\n              className=\"button-disabled\"\n            >\n              <img\n                src={pause}\n                id=\"pause-button\"\n                className=\"icon-disabled\"\n                alt=\"pause-button\"\n              />\n            </button>\n            <button\n              onClick={restartTimer}\n              id=\"restart-button\"\n              alt=\"restart-button\"\n            >\n              <img src={restart} />\n            </button>\n          </>\n        )}\n      </div>\n    </>\n  );\n}\n","/Users/707/Documents/code/pomodoro-timer/src/components/TimerTopButtons/TimerTopButtons.js",["41","42"],[],"import { useState } from \"react\";\nimport SettingsPanel from \"../SettingsPanel/SettingsPanel.js\";\nimport InfoPanel from \"../InfoPanel/InfoPanel.js\";\nimport settings from \"../../assets/settings.svg\";\nimport info from \"../../assets/info.svg\";\nimport clockIcon from \"../../assets/clock.svg\";\nimport clockIconDisabled from \"../../assets/clock-disabled.svg\";\nimport breakIcon from \"../../assets/coffee-blue.svg\";\nimport breakIconDisabled from \"../../assets/coffee-disabled.svg\";\nimport \"./TimerTopButtons.css\";\n\nexport default function InfoAndSettings({\n  workTime,\n  setWorkTime,\n  showWorkTime,\n  setShowWorkTime,\n  breakTime,\n  setBreakTime,\n  showBreakTime,\n  setShowBreakTime,\n  soundPreference,\n  setSoundPreference,\n}) {\n  const [infoPanel, setInfoPanel] = useState(false);\n  const [settingsPanel, setSettingsPanel] = useState();\n\n  function handleTimerType() {\n    if (showWorkTime) {\n      setShowWorkTime(false);\n      setShowBreakTime(true);\n    } else {\n      setShowWorkTime(true);\n      setShowBreakTime(false);\n    }\n  }\n\n  function handleInfoPanel() {\n    infoPanel ? setInfoPanel(false) : setInfoPanel(true);\n  }\n\n  function handleSettingsPanel() {\n    settingsPanel ? setSettingsPanel(false) : setSettingsPanel(true);\n  }\n\n  return (\n    <div className=\"info-and-settings\">\n      {infoPanel && <InfoPanel setInfoPanel={setInfoPanel} />}\n      <img src={info} className=\"icon\" onClick={handleInfoPanel} />\n\n      {showWorkTime ? (\n        <img src={clockIcon} alt=\"study-timer-selected\" className=\"active\" />\n      ) : (\n        <img\n          src={clockIconDisabled}\n          alt=\"study-timer-off\"\n          className=\"icon\"\n          onClick={handleTimerType}\n        />\n      )}\n\n      {showBreakTime ? (\n        <img src={breakIcon} alt=\"break-timer-selected\" className=\"active\" />\n      ) : (\n        <img\n          src={breakIconDisabled}\n          alt=\"break-timer-off\"\n          className=\"icon\"\n          onClick={handleTimerType}\n        />\n      )}\n\n      {settingsPanel && (\n        <SettingsPanel\n          workTime={workTime}\n          breakTime={breakTime}\n          setSettingsPanel={setSettingsPanel}\n          setWorkTime={setWorkTime}\n          setBreakTime={setBreakTime}\n          soundPreference={soundPreference}\n          setSoundPreference={setSoundPreference}\n        />\n      )}\n      <img src={settings} className=\"icon\" onClick={handleSettingsPanel} />\n    </div>\n  );\n}\n","/Users/707/Documents/code/pomodoro-timer/src/components/InfoPanel/InfoPanel.js",[],[],"/Users/707/Documents/code/pomodoro-timer/src/components/SettingsPanel/SettingsPanel.js",[],[],{"ruleId":"43","severity":1,"message":"44","line":87,"column":3,"nodeType":"45","endLine":93,"endColumn":4},{"ruleId":"46","severity":1,"message":"47","line":178,"column":15,"nodeType":"48","endLine":178,"endColumn":36},{"ruleId":"46","severity":1,"message":"47","line":48,"column":7,"nodeType":"48","endLine":48,"endColumn":68},{"ruleId":"46","severity":1,"message":"47","line":83,"column":7,"nodeType":"48","endLine":83,"endColumn":76},"react-hooks/exhaustive-deps","The 'pauseTimer' function makes the dependencies of useEffect Hook (at line 68) change on every render. To fix this, wrap the definition of 'pauseTimer' in its own useCallback() Hook.","FunctionDeclaration","jsx-a11y/alt-text","img elements must have an alt prop, either with meaningful text, or an empty string for decorative images.","JSXOpeningElement"]